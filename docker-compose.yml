services:
  # Databases
  mysql:
    image: mysql:8.4
    container_name: peraxis-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: peraxis_main
      MYSQL_USER: peraxis_user
      MYSQL_PASSWORD: ${DB_ADMIN_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docs/DATABASE-INIT.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - peraxis-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    security_opt:
      - no-new-privileges:true

  mongodb:
    image: mongo:7.0
    container_name: peraxis-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${DB_ADMIN_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - peraxis-network
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:7.2-alpine
    container_name: peraxis-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - peraxis-network
    security_opt:
      - no-new-privileges:true

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: peraxis-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - peraxis-network

  # Backend Services
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: peraxis-api-gateway
    volumes:
      - maven_cache:/root/.m2
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PASSWORD=peraxis123
      - JWT_SECRET=${JWT_SECRET}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    depends_on:
      redis:
        condition: service_started
    networks:
      - peraxis-network

  user-service:
    image: maven:3.8.4-openjdk-17
    container_name: peraxis-user-service
    working_dir: /app
    volumes:
      - ./backend/user-service:/app
      - maven_cache:/root/.m2
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/peraxis_main
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=peraxis123
    command: ["mvn", "spring-boot:run"]
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - peraxis-network

  product-service:
    image: maven:3.8.4-openjdk-17
    container_name: peraxis-product-service
    working_dir: /app
    volumes:
      - ./backend/product-service:/app
      - maven_cache:/root/.m2
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://admin:peraxis123@mongodb:27017/peraxis_products?authSource=admin
    command: ["mvn", "spring-boot:run"]
    depends_on:
      - mongodb
    networks:
      - peraxis-network

  order-service:
    image: maven:3.8.4-openjdk-17
    container_name: peraxis-order-service
    working_dir: /app
    volumes:
      - ./backend/order-service:/app
      - maven_cache:/root/.m2
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/peraxis_main
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=peraxis123
    command: ["mvn", "spring-boot:run"]
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - peraxis-network

  ai-service:
    image: maven:3.8.4-openjdk-17
    container_name: peraxis-ai-service
    working_dir: /app
    volumes:
      - ./backend/ai-service:/app
      - maven_cache:/root/.m2
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PASSWORD=peraxis123
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    command: ["mvn", "spring-boot:run"]
    depends_on:
      - redis
    networks:
      - peraxis-network

  admin-service:
    image: maven:3.8.4-openjdk-17
    container_name: peraxis-admin-service
    working_dir: /app
    volumes:
      - ./backend/admin-service:/app
      - maven_cache:/root/.m2
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    command: ["mvn", "spring-boot:run"]
    networks:
      - peraxis-network

  payment-service:
    image: maven:3.8.4-openjdk-17
    container_name: peraxis-payment-service
    working_dir: /app
    volumes:
      - ./backend/payment-service:/app
      - maven_cache:/root/.m2
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    command: ["mvn", "spring-boot:run"]
    networks:
      - peraxis-network

  websocket-service:
    image: maven:3.8.4-openjdk-17
    container_name: peraxis-websocket-service
    working_dir: /app
    volumes:
      - ./backend/websocket-service:/app
      - maven_cache:/root/.m2
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PASSWORD=peraxis123
    command: ["mvn", "spring-boot:run"]
    depends_on:
      - redis
    networks:
      - peraxis-network

  notification-service:
    image: maven:3.8.4-openjdk-17
    container_name: peraxis-notification-service
    working_dir: /app
    volumes:
      - ./backend/notification-service:/app
      - maven_cache:/root/.m2
    ports:
      - "8088:8088"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    command: ["mvn", "spring-boot:run"]
    networks:
      - peraxis-network

  search-service:
    image: maven:3.8.4-openjdk-17
    container_name: peraxis-search-service
    working_dir: /app
    volumes:
      - ./backend/search-service:/app
      - maven_cache:/root/.m2
    ports:
      - "8089:8089"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PASSWORD=peraxis123
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
    command: ["mvn", "spring-boot:run"]
    depends_on:
      - redis
      - elasticsearch
    networks:
      - peraxis-network

  activity-service:
    image: maven:3.8.4-openjdk-17
    container_name: peraxis-activity-service
    working_dir: /app
    volumes:
      - ./backend/activity-service:/app
      - maven_cache:/root/.m2
    ports:
      - "8090:8090"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://admin:peraxis123@mongodb:27017/peraxis_activities?authSource=admin
    command: ["mvn", "spring-boot:run"]
    depends_on:
      - mongodb
    networks:
      - peraxis-network

  location-service:
    image: maven:3.8.4-openjdk-17
    container_name: peraxis-location-service
    working_dir: /app
    volumes:
      - ./backend/location-service:/app
      - maven_cache:/root/.m2
    ports:
      - "8091:8091"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/peraxis_location
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=peraxis123
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PASSWORD=peraxis123
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    command: ["mvn", "spring-boot:run"]
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - peraxis-network

  # Frontend Applications
  customer-app:
    image: nginx:alpine
    container_name: peraxis-customer-app
    ports:
      - "3000:80"
    volumes:
      - ./frontend/customer-app/dist:/usr/share/nginx/html:ro
      - ./frontend/customer-app/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - peraxis-network

  admin-dashboard:
    image: nginx:alpine
    container_name: peraxis-admin-dashboard
    ports:
      - "3001:80"
    volumes:
      - ./frontend/admin-dashboard/dist:/usr/share/nginx/html:ro
      - ./frontend/admin-dashboard/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - peraxis-network

  seller-portal:
    image: nginx:alpine
    container_name: peraxis-seller-portal
    ports:
      - "3002:80"
    volumes:
      - ./frontend/seller-portal/dist:/usr/share/nginx/html:ro
      - ./frontend/seller-portal/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - peraxis-network

volumes:
  mysql_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  maven_cache:

networks:
  peraxis-network:
    driver: bridge
